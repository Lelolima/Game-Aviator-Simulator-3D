using UnityEngine;
using UnityEngine.UI;

public class ControleDeVoo : MonoBehaviour
{
    public float velocidade = 10.0f;
    public float rotacaoVelocidade = 100.0f;

    void Update()
    {
        float movimentoFrontal = Input.GetAxis("Vertical") * velocidade * Time.deltaTime;
        float rotacao = Input.GetAxis("Horizontal") * rotacaoVelocidade * Time.deltaTime;

        transform.Translate(Vector3.forward * movimentoFrontal);
        transform.Rotate(Vector3.up * rotacao);
    }
}

public class CameraSeguir : MonoBehaviour
{
    public Transform alvo;
    public Vector3 offset;

    void LateUpdate()
    {
        transform.position = alvo.position + offset;
        transform.LookAt(alvo);
    }
}

public class HUD : MonoBehaviour
{
    public Text velocidadeTexto;
    public Rigidbody aeronaveRigidbody;

    void Update()
    {
        float velocidadeAtual = aeronaveRigidbody.velocity.magnitude;
        velocidadeTexto.text = "Velocidade: " + velocidadeAtual.ToString("F2") + " m/s";
    }
}

public class SomDeVoo : MonoBehaviour
{
    public AudioSource motorAudio;
    public Rigidbody aeronaveRigidbody;

    void Update()
    {
        motorAudio.pitch = 1 + (aeronaveRigidbody.velocity.magnitude / 100);
    }
}

public class Checkpoint : MonoBehaviour
{
    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            // Código para completar a missão
            Debug.Log("Checkpoint alcançado!");
        }
    }
}

public class Combustivel : MonoBehaviour
{
    public float combustivelMaximo = 100.0f;
    public float consumoPorSegundo = 1.0f;
    public Text combustivelTexto;

    private float combustivelAtual;

    void Start()
    {
        combustivelAtual = combustivelMaximo;
    }

    void Update()
    {
        combustivelAtual -= consumoPorSegundo * Time.deltaTime;
        combustivelAtual = Mathf.Max(combustivelAtual, 0);
        combustivelTexto.text = "Combustível: " + combustivelAtual.ToString("F2") + " L";

        if (combustivelAtual <= 0)
        {
            // Código para lidar com a falta de combustível
            Debug.Log("Sem combustível!");
        }
    }
}

public class Pontuacao : MonoBehaviour
{
    public Text pontuacaoTexto;
    private int pontuacaoAtual = 0;

    public void AdicionarPontos(int pontos)
    {
        pontuacaoAtual += pontos;
        pontuacaoTexto.text = "Pontuação: " + pontuacaoAtual;
    }
}

public class Clima : MonoBehaviour
{
    public ParticleSystem chuva;
    public Light direcionalLuz;

    void Start()
    {
        // Ativar ou desativar a chuva
        chuva.gameObject.SetActive(Random.value > 0.5f);

        // Ajustar a intensidade da luz para simular neblina
        direcionalLuz.intensity = Random.Range(0.5f, 1.0f);
    }
}

public class Dano : MonoBehaviour
{
    public float vidaMaxima = 100.0f;
    public float vidaAtual;
    private EfeitosVisuais efeitosVisuais;

    void Start()
    {
        vidaAtual = vidaMaxima;
        efeitosVisuais = GetComponent<EfeitosVisuais>();
    }

    void OnCollisionEnter(Collision collision)
    {
        // Reduz a vida com base na força da colisão
        float dano = collision.relativeVelocity.magnitude * 10;
        vidaAtual -= dano;
        Debug.Log("Dano recebido: " + dano);
        
        // Aplicar efeito visual de dano
        if (efeitosVisuais != null)
        {
            efeitosVisuais.AplicarEfeitoDanoMomentaneo(dano / vidaMaxima);
        }

        if (vidaAtual <= 0)
        {
            // Código para lidar com a destruição da aeronave
            Debug.Log("Aeronave destruída!");
            DestruirAeronave();
        }
    }
    
    public void RepararAeronave(float quantidadeReparo)
    {
        vidaAtual = Mathf.Min(vidaAtual + quantidadeReparo, vidaMaxima);
    }
    
    private void DestruirAeronave()
    {
        // Criar efeito de explosão
        if (efeitosVisuais != null)
        {
            efeitosVisuais.CriarExplosao(transform.position);
        }
        
        // Desativar controles
        FisicaDeVoo fisicaVoo = GetComponent<FisicaDeVoo>();
        if (fisicaVoo != null)
        {
            fisicaVoo.enabled = false;
        }
        
        // Mostrar tela de game over após alguns segundos
        Invoke("MostrarGameOver", 3.0f);
    }
    
    private void MostrarGameOver()
    {
        // Aqui você pode implementar a lógica para mostrar a tela de game over
        // ou reiniciar o nível
        Debug.Log("Game Over");
    }
}

public class GerenciadorDeMissao : MonoBehaviour
{
    public Checkpoint[] checkpoints;
    private int checkpointAtual = 0;

    void Start()
    {
        AtivarCheckpoint(checkpointAtual);
    }

    public void ProximoCheckpoint()
    {
        if (checkpointAtual < checkpoints.Length - 1)
        {
            checkpointAtual++;
            AtivarCheckpoint(checkpointAtual);
        }
        else
        {
            Debug.Log("Todas as missões concluídas!");
        }
    }

    private void AtivarCheckpoint(int index)
    {
        for (int i = 0; i < checkpoints.Length; i++)
        {
            checkpoints[i].gameObject.SetActive(i == index);
        }
    }
}

public class SistemaDeSalvamento : MonoBehaviour
{
    public Pontuacao pontuacao;

    public void SalvarProgresso()
    {
        PlayerPrefs.SetInt("Pontuacao", pontuacao.pontuacaoAtual);
        PlayerPrefs.Save();
        Debug.Log("Progresso salvo!");
    }

    public void CarregarProgresso()
    {
        if (PlayerPrefs.HasKey("Pontuacao"))
        {
            pontuacao.pontuacaoAtual = PlayerPrefs.GetInt("Pontuacao");
            Debug.Log("Progresso carregado!");
        }
    }
}
